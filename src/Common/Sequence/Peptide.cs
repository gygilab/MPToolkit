
using System.Collections.Generic;
using System.Text;

namespace MPToolkit.Common.Sequence
{

    public class PeakMatch
    {
        public double TheoMz;
        public double ObsMz;
        public double Intensity;
        public int Rank;
    }

    public class Peptide
    {
        /// <summary>
        /// A unique number used to identify the peptide.
        /// </summary>
        public int Id;

        /// <summary>
        /// The scan number for the peptide
        /// </summary>
        public int ScanNumber;

        /// <summary>
        /// Peptide precursor m/z
        /// </summary>
        public double PrecursorMz;

        /// <summary>
        /// Scoring result
        /// </summary>
        public double Score;

        /// <summary>
        /// Residue to the left of the peptide.
        /// </summary>
        public char LeftFlank;

        /// <summary>
        /// Residue to the right of the peptide.
        /// </summary>
        public char RightFlank;

        /// <summary>
        /// Diff mods present on the peptide.
        /// </summary>
        /// <returns></returns>
        public PeptideMods Mods = new PeptideMods();

        /// <summary>
        /// Total number of fragment ions generated by the peptide.
        /// </summary>
        public int IonsTotal;

        /// <summary>
        /// Count of matched fragment ions.
        /// </summary>
        public int IonsMatched;

        /// <summary>
        /// Index of mod arrangements.
        /// <see>PeptideGenerator</see>
        /// </summary>
        public int GeneratorIndex;

        /// <summary>
        /// Stores information from matched peaks.
        /// </summary>
        public List<PeakMatch> Matches;

        /// <summary>
        /// Stores counts of matches from each peak depth.
        /// </summary>
        public List<int> MatchesByDepth;

        /// <summary>
        /// Amino acid sequence.
        /// </summary>
        public string Sequence;

        /// <summary>
        /// Annotated sequence with flanking residues and modification symbols.
        /// </summary>
        public string AnnotatedSequence;

        public Peptide Clone()
        {
            return (Peptide)MemberwiseClone();
        }

        /// <summary>
        /// Serializes peptide with flanking residues and mod symbols.
        /// </summary>
        /// <returns>A string representation of the peptide</returns>
        public override string ToString()
        {
            if (!string.IsNullOrEmpty(AnnotatedSequence)) {
                return AnnotatedSequence;
            }

            var builder = new StringBuilder();
            for (int i = 0; i < Sequence.Length; ++i)
            {
                builder.Append(Sequence[i]);
            }

            for (int i = Sequence.Length - 1; i >= 0; --i) {
                foreach (var mod in Mods.GetMods(i)) {
                    builder.Insert(i + 1, mod.Symbol);
                }
            }
            AnnotatedSequence = LeftFlank + "." + builder.ToString() + "." + RightFlank;
            return AnnotatedSequence;
        }
    }
}
